import std.stdio;
import std.algorithm : equal;
public import std.range, std.array;

string foo()
{
    return "Hello";
}

string foo(string user)
{
    return "Hello" ~ user;
}

struct UsersStruct
{
    int a;
    string b;
    UsersBase u;
}


class UsersBase
{
    private string[int] users;
    protected int var_protected;
    public int var_public;

    void save(int i, string user)
    {
        users[i] = user;
    }

    string get(int i) const
    {
        import std.exception;
        auto ptr = i in users;
        enforce(ptr, "User not found");
        return *ptr;
    }

    string get(int i, string defaultUser) const
    {
        auto ptr = i in users;
        return ptr ? *ptr : defaultUser;
    }
}

class UsersDerived : UsersBase
{
     override string get(int i, string defaultUser) const
     {
         return "Derived " ~ super.get(i, defaultUser);
     }

     static class SubClass
     {
     }
}

static auto base = new UsersBase;

string foo(int i)
{
    return base.get(i);
}

int main()
{
    writeln(foo(15));
    writeln("Test");
}

unittest()
{
    UsersDerived.SubClass c;
}
